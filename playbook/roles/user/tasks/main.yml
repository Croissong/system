---
- name: user
  tags: user
  become_user: "{{ user.name }}"
  block:
  - name: clone repos
    git:
      repo: "{{ item.repo }}"
      dest: "{{ item.dest }}"
      version: master
      recursive: yes
      track_submodules: yes
    register: warning
    failed_when: warning.failed and warning.msg != "Local modifications exist in repository (force=no)."
    with_items:
    - { repo: "{{ repos.dotfiles }}", dest: "$DOTFILES"}
    - { repo: "{{ repos.emacs }}", dest: "$XDG_CONFIG_HOME/emacs"}
    - { repo: "{{ repos.pass }}", dest: "$HOME/Pass/password-store"}
    - { repo: "{{ repos.passOtp }}", dest: "$HOME/Pass/pass-otp"}


  - name: enable user services
    service: name={{ item }} scope=user enabled=yes state=started
    with_items:
    - emacs
    - gammastep
    - tmux


  - name: setup mail client
    vars:
      accounts:
      - iogroup
    block:
    - name: enable mbsync on boot timer
      systemd:
        name: "mbsync.timer"
        enabled: true
        scope: user
        state: started
    - name: enable imapnotify services
      systemd:
        name: "goimapnotify@{{ item }}.service"
        enabled: true
        scope: user
        state: started
      loop: "{{ accounts }}"


    # - name: setup google drive docs sync
    #   tags: ['gdrive']
    #   vars:
    #     drive_dir: "$HOME/docs/sync"
    #   block:
    #   - name: ensure directory exists
    #     file: path="{{ drive_dir }}" state=directory
    #   - name: check if directory initialized
    #     stat: path="{{ drive_dir }}/.gd"
    #     register: stat_output

    #   - name: init drive directory
    #     when: stat_output.stat.exists == False
    #     expect:
    #       command: drive init
    #       chdir: "{{ drive_dir }}"
    #       responses:
    #         oauth_code:
    #           - oauth_code
    #   - name: sync drive directory
    #     tags: ['maintenance']
    #     command: drive push -no-prompt
    #     args:
    #       chdir: "{{ drive_dir }}"
    #     register: output
    #     changed_when: output.stdout.find('Everything is up-to-date') == -1

  - name: install AUR package helper paru
    aur:
      name: paru-bin
      use: makepkg
      aur_only: False
      skip_installed: True

  - import_tasks: npm.yml
